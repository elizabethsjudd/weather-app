@use "sass:string";
@use './tokens/contextual/z-index.scss' as *;
@use 'sass:math';

// Variables
// ---------------------------------------------------------
$max-full-width-content: 50rem;

// Functions
// ---------------------------------------------------------

/// Converts pixels to rems
/// @group functions
/// @param {Number} $value - Pixel value to convert
/// @param {Number} $baseline - Baseline value to use, defaults to 16 the current UX standard
/// @returns {Number} The rem equivalent of $value
/// @example rem(600)
@function rem($value, $baseline: 16) {
	$rem-value: (math.div($value, 16)) + rem;

	@return $rem-value;
}

// Accessibility Utilities
// ---------------------------------------------------------

.u-visuallyHidden {
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	height: 1px;
	overflow: hidden;
	position: absolute;
	white-space: nowrap;
	width: 1px;
}

// Focus utilities
// ---------------------------------------------------------

.u-focus-wrapper {
	position: relative;
}

/// Used to create a consistent focus indicator for interactive elements
/// @group mixins
/// @param {String} $element-radius - Used with "element" setup to apply a border radius to the focus indicator
/// 	Should be set to a CSS token. Default is var(--border-radius-control).
/// @param {String} $pseudo-element - Used with the "element" setup to allow developers to choose which pseudo element
/// 	is used.  Available options are "before" (default) and "after"
/// @param {String} $is-inline-element - Used with the "element" setup with a self-closing element. Requires wrapping the
/// 	element with `div.u-focus-wrapper` and have an immediate sibling `span.u-focus-indicator`. See the input component
/// 	as an example. Available options are "true", "false" (default)
/// @param {String} $border-width - the border width of the element having focus applied to ensure the offset
/// 	is correct. Default is '0px'
/// 
/// @example @include focus; // Generates the default version
@mixin focus($element-radius: 'var(--border-radius-control)', $pseudo-element: 'after', $is-inline-element: 'false', $border-width: '0px') {
	$focus-selector: ':focus-visible';

	// In Safari, border radius isn't applied to outlines. Using a pseudo element allows us
	// to achieve a similar effect however inline elements do not support pseudo elements which
	// is why an additional element is applied after the element.
	@if $is-inline-element == 'true' {
		$focus-selector: ':focus-visible + .u-focus-indicator';
	} @else {
		// Make sure the element has position relative
		position: relative;
	}

	&#{string.unquote($focus-selector)} {
		outline: none;

		&::#{string.unquote($pseudo-element)} {
			border: var(--line-width-focus) solid var(--color-focus);
			border-radius: calc(#{string.unquote($element-radius)} + var(--line-width-focus) + var(--space-offset-focus));
			content: '';
			display: block;
			inset: calc((var(--space-offset-focus) + var(--line-width-focus) + #{string.unquote($border-width)}) * -1);
			position: absolute;
			z-index: $z-index-focus;
		}
	}
}

// Text Utilities
// ---------------------------------------------------------

/// Used to create a consistent text styles across components
/// @param {String} $size - Sets the size modifier for the font and line-height
/// 	Available options are "xsmall", "small", "medium" (default), "large".
/// @param {String} $is-interactive - Use when the text is within (e.g., button)
///     or associated to an interactive element (e.g., label). Available options
///     are "true", "false" (default)
/// 
/// @example @include text($size: 'xsmall', $is-interactive: 'true');
@mixin text($size: 'medium', $is-interactive: 'false') {
	$size-modifier: -#{$size};
	$token: 'text';

	@if $size == 'medium' {
		$size-modifier: ''
	}

	@if $is-interactive == 'true' {
		$token: 'interactive'
	}

	font-size: var(--type-size-text#{$size-modifier});
	font-weight: var(--type-weight-#{$token});
	line-height: var(--type-line-height-text#{$size-modifier});
}

// Helper mixins and SCSS variables related to control elements
// (e.g., buttons, inputs, selects, etc.)
// ---------------------------------------------------------

$control-padding: var(--space-inset-control);
$control-border-color: var(--color-line);
$control-border-width: var(--line-width-control);

/// Used to create a consistent styling across various controls
/// Mixin includes hover and partial focus states
/// 
/// @example @include common-control-styles;
@mixin common-control-styles() {
	background: white;
	border: $control-border-width solid $control-border-color;
	border-radius: var(--border-radius-control);
	box-sizing: border-box;
	min-height: var(--size-large);
	padding: 0 $control-padding;
	transition: all 0.2s ease;
	transition-property: color, background-color, border-color;

	&:hover {
		border-color: var(--color-line-hover);
		color: var(--color-text-hover);
	}

	&:focus,
	&:focus-visible {
		border-color: var(--color-line-hover);
		outline: none;
	}
}
